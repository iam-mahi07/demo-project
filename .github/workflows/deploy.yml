name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      run: |
        docker build --file Dockerfile --tag ${{ secrets.ECR_REPOSITORY }}:latest .
      
    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --force-new-deployment

  test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run integration tests
      run: |
        # Add commands to run your integration tests here
        # e.g., curl -f http://your-ecs-service-url/health-check

  rollback:
   name: Rollback Deployment
   runs-on: ubuntu-latest
   if: failure()
   needs: test

   steps:
   - name: Set up AWS CLI
     uses: aws-actions/configure-aws-credentials@v2
     with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}

   - name: Rollback ECS Service
     run: |
      # Retrieve the previous task definition revision
      TASK_DEFINITION_ARN=$(aws ecs describe-services \
        --cluster ${{ secrets.ECS_CLUSTER }} \
        --services ${{ secrets.ECS_SERVICE }} \
        --query 'services[0].taskDefinition' \
        --output text)

      # Update the ECS service to use the previous task definition revision
      aws ecs update-service \
        --cluster ${{ secrets.ECS_CLUSTER }} \
        --service ${{ secrets.ECS_SERVICE }} \
        --task-definition $TASK_DEFINITION_ARN
